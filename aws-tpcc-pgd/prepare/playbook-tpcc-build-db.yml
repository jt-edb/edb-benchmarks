---
- hosts: all
  name: Populate TPCC database
  become: true
  gather_facts: true

  collections:
    - edb_devops.edb_postgres

  tasks:
    - name: Make {{ hammerdb_data_path }} exists
      ansible.builtin.file:
        path: "{{ hammerdb_data_path }}"
        state: directory
      when: "'hammerdb' in group_names"

    - name: Generate HammerDB loader script
      ansible.builtin.template:
        src: loader.tcl.j2
        dest: "{{ hammerdb_data_path }}/loader.tcl"
      when: "'hammerdb' in group_names"

    - name: Remove BDR nodes
      community.postgresql.postgresql_query:
        query: >-
          SELECT bdr.part_node(node_name := '{{ item }}')
        db: "{{ bdr_dbname }}"
        login_user: "{{ pg_user }}"
        port: 5444
        login_unix_socket: "{{ pg_login_unix_socket }}"
      become: true
      become_user: "{{ pg_owner }}"
      when: inventory_hostname == 'bdr1'
      loop:
        - bdr2

    - name: Cleanup replication origin
      community.postgresql.postgresql_query:
        query: >-
          SELECT pg_replication_origin_drop('bdr_local_only_origin')
        db: "{{ bdr_dbname }}"
        login_user: "{{ pg_user }}"
        port: 5444
        login_unix_socket: "{{ pg_login_unix_socket }}"
      become: true
      become_user: "{{ pg_owner }}"
      when: inventory_hostname == 'bdr1'

    - name: DROP bdr extension
      community.postgresql.postgresql_query:
        query: >-
          DROP EXTENSION bdr CASCADE
        db: "{{ bdr_dbname }}"
        login_user: "{{ pg_user }}"
        port: 5444
        login_unix_socket: "{{ pg_login_unix_socket }}"
      become: true
      become_user: "{{ pg_owner }}"
      when: inventory_hostname == 'bdr1'

    - name: "DROP {{ bdr_dbname }} database"
      community.postgresql.postgresql_db:
        maintenance_db: postgres
        state: absent
        name: "{{ bdr_dbname }}"
        login_user: "{{ pg_user }}"
        port: 5444
        login_unix_socket: "{{ pg_login_unix_socket }}"
        force: true
      become: true
      become_user: "{{ pg_owner }}"
      when: inventory_hostname == 'bdr1'

    - name: Restart Postgres on bdr1
      ansible.builtin.systemd:
        name: postgres
        state: restarted
      become: true
      when: inventory_hostname == 'bdr1'

    - name: Stop Postgres on bdr2
      ansible.builtin.systemd:
        name: postgres
        state: stopped
      become: true
      when: inventory_hostname == 'bdr2'

    - name: Wait for port 5444
      ansible.builtin.wait_for:
        host: 0.0.0.0
        port: 5444
        state: started
      when: inventory_hostname == 'bdr1'

    - name: Populate the TPCC database
      ansible.builtin.command:
        cmd: "./hammerdbcli tcl auto {{ hammerdb_data_path }}/loader.tcl"
        chdir: "{{ hammerdb_install_path }}"
      async: 180000
      poll: 60
      changed_when: false
      when: "'hammerdb' in group_names"

    - name: Create the pkey on the history table
      community.postgresql.postgresql_query:
        query: >-
          ALTER TABLE history ADD PRIMARY KEY (h_date, h_c_id, h_c_w_id, h_w_id, h_c_d_id, h_d_id)
        db: "{{ bdr_dbname }}"
        login_user: "{{ pg_user }}"
        port: 5444
        login_unix_socket: "{{ pg_login_unix_socket }}"
      become: true
      become_user: "{{ pg_owner }}"
      async: 180000
      poll: 60
      when: inventory_hostname == 'bdr1'

    - name: Issuing CHECKPOINT on bdr1
      community.postgresql.postgresql_query:
        autocommit: true
        query: >-
          CHECKPOINT
        db: "{{ bdr_dbname }}"
        login_user: "{{ pg_user }}"
        port: 5444
        login_unix_socket: "{{ pg_login_unix_socket }}"
      become_user: "{{ pg_owner }}"
      when: inventory_hostname == 'bdr1'
      async: 180000
      poll: 60

    - name: Create bdr extension
      community.postgresql.postgresql_ext:
        name: bdr
        state: present
        db: "{{ bdr_dbname }}"
        login_user: "{{ pg_user }}"
        port: 5444
        login_unix_socket: "{{ pg_login_unix_socket }}"
      become: true
      become_user: "{{ pg_owner }}"
      when: inventory_hostname == 'bdr1'

    - name: Create BDR node on bdr1
      community.postgresql.postgresql_query:
        query: >-
          SELECT bdr.create_node('bdr1', 'host=bdr1 dbname={{ bdr_dbname }} port=5444 user={{ pg_user }}');
        db: "{{ bdr_dbname }}"
        login_user: "{{ pg_user }}"
        port: 5444
        login_unix_socket: "{{ pg_login_unix_socket }}"
      become: true
      become_user: "{{ pg_owner }}"
      when: inventory_hostname == 'bdr1'

    - name: Create BDR group on bdr1
      community.postgresql.postgresql_query:
        query: >-
          SELECT bdr.create_node_group('bdrdb_group');
        db: "{{ bdr_dbname }}"
        login_user: "{{ pg_user }}"
        port: 5444
        login_unix_socket: "{{ pg_login_unix_socket }}"
      become: true
      become_user: "{{ pg_owner }}"
      when: inventory_hostname == 'bdr1'

    - name: Cleaning up Postgres file systems
      ansible.builtin.shell: |
        rm -rf {{ pg_data }}
        rm -rf {{ pg_wal }}
        mkdir {{ pg_wal }}
        chown enterprisedb.enterprisedb {{ pg_wal }}
        # Required by bdr_init_physical
        chown enterprisedb.enterprisedb {{ pg_data | dirname }}
      become: true
      when: inventory_hostname == 'bdr2'

    - name: Building bdr2 with bdr_init_physical
      ansible.builtin.shell: |
        /usr/edb/as{{ pg_version }}/bin/bdr_init_physical -D {{ pg_data }} \
                -l /tmp/bdr_init_physical.log \
                -n bdr2 \
                --node-group-name bdrdb_group \
                -d 'host=bdr1 port=5444 dbname={{ bdr_dbname }}' \
                --local-dsn 'host=bdr2 port=5444 dbname={{ bdr_dbname }}'
      when: inventory_hostname == 'bdr2'
      become_user: "{{ pg_user }}"
      async: 180000
      poll: 60

    - name: Stop Postgres on bdr2
      ansible.builtin.shell: |
        /usr/edb/as{{ pg_version }}/bin/pg_ctl -D {{ pg_data }} stop
      when: inventory_hostname == 'bdr2'
      become_user: "{{ pg_owner }}"

    - name: Updating PGWAL location
      ansible.builtin.shell: |
        rm -rf {{ pg_wal }}/*
        rsync -cavr {{ pg_data }}/pg_wal/* {{ pg_wal }}/.
        rm -rf {{ pg_data }}/pg_wal/
        ln -s {{ pg_wal }} {{ pg_data }}/pg_wal
      become: true
      when: inventory_hostname == 'bdr2'

    - name: Starting Postgres on bdr2
      ansible.builtin.systemd:
        name: postgres
        state: started
      become: true
      when: inventory_hostname == 'bdr2'
