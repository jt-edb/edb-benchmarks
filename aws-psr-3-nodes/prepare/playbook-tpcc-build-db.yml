---
- hosts: all
  name: Populate TPCC database
  become: true
  gather_facts: true

  collections:
    - edb_devops.edb_postgres

  tasks:
    - name: Make {{ hammerdb_data_path }} exists
      ansible.builtin.file:
        path: "{{ hammerdb_data_path }}"
        state: directory
      when: "'hammerdb' in group_names"

    - name: Generate HammerDB loader script
      ansible.builtin.template:
        src: loader.tcl.j2
        dest: "{{ hammerdb_data_path }}/loader.tcl"
      when: "'hammerdb' in group_names"

    - name: Wait for Postgres to be ready
      ansible.builtin.command:
        cmd: >
          {{ pg_bin_path }}/pg_isready -d postgres -h {{ pg_unix_socket_directories[0] }}
      become_user: "{{ pg_owner }}"
      register: pg_isready
      until: "pg_isready is not failed"
      retries: 10
      delay: 10
      when: "'primary' in group_names"

    - name: Populate the TPCC database
      ansible.builtin.command:
        cmd: "./hammerdbcli tcl auto {{ hammerdb_data_path }}/loader.tcl"
        chdir: "{{ hammerdb_install_path }}"
      async: 180000
      poll: 60
      changed_when: false
      when: "'hammerdb' in group_names"

    - name: Issuing CHECKPOINT
      community.postgresql.postgresql_query:
        autocommit: true
        query: >-
          CHECKPOINT
        db: "{{ pg_database }}"
        login_user: "{{ pg_user }}"
        port: "{{ pg_port }}"
        login_unix_socket: "{{ pg_unix_socket_directories[0] }}"
      become_user: "{{ pg_owner }}"
      when: "'primary' in group_names"
      async: 180000
      poll: 60

- hosts: standby
  name: Install and initialize Postgres on standby nodes
  become: true
  gather_facts: true
  collections:
    - edb_devops.edb_postgres

  roles:
    - role: install_dbserver
    - role: setup_replication
    - role: tuning

  tasks:
    - name: Apply PostgreSQL tunning
      ansible.builtin.lineinfile:
        path: "{{ pg_data }}/postgresql.auto.conf"
        line: "{{ item.name }} = '{{ item.value }}'"
        create: true
        owner: "{{ pg_owner }}"
        group: "{{ pg_group }}"
      loop: "{{ pg_settings }}"
      become_user: "{{ pg_owner }}"

    - name: Allow TPCC connections on the instance
      ansible.builtin.lineinfile:
        path: "{{ pg_data }}/pg_hba.conf"
        line: "host   all  all  10.0.0.0/24   trust"
      become_user: "{{ pg_owner }}"

    - name: Restart the instance
      ansible.builtin.systemd:
        name: "{{ pg_service }}"
        state: restarted
      become: true
