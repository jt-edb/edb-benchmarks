---
- hosts: primary
  name: Setup EPAS 15 with and without TDE
  become: true
  gather_facts: false

  tasks:
    - name: Setup beta repo
      ansible.builtin.shell: >
        curl -1sLf \
          'https://downloads.enterprisedb.com/{{ edb_beta_repo_token }}/enterprise_beta/setup.rpm.sh' \
        | sudo -E bash

    - name: Install EPAS 15
      ansible.builtin.package:
        name: edb-as15-server

    - name: Make sure data and wal directories do not exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ pg_data }}"
        - "{{ pg_wal }}"
        - "{{ pg_data_tde }}"
        - "{{ pg_wal_tde }}"

    - name: Make sure data and wal directories exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: "{{ pg_owner }}"
        group: "{{ pg_group }}"
        mode: 0700
      loop:
        - "{{ pg_data }}"
        - "{{ pg_wal }}"
        - "{{ pg_data_tde }}"
        - "{{ pg_wal_tde }}"

    - name: Create the encrypted instance
      ansible.builtin.command: >
        /usr/edb/as15/bin/initdb -D {{ pg_data_tde }} -X {{ pg_wal_tde }} --data-encryption --no-key-wrap
      become_user: "{{ pg_owner }}"

    - name: Create the unencrypted instance
      ansible.builtin.command: >
        /usr/edb/as15/bin/initdb -D {{ pg_data }} -X {{ pg_wal }}
      become_user: "{{ pg_owner }}"

    - name: Apply PostgreSQL tunning on the encrypted instance
      ansible.builtin.lineinfile:
        path: "{{ pg_data_tde }}/postgresql.auto.conf"
        line: "{{ item.name }} = '{{ item.value }}'"
        create: true
        owner: "{{ pg_owner }}"
        group: "{{ pg_group }}"
      loop: "{{ pg_settings }}"
      become_user: "{{ pg_owner }}"

    - name: Apply PostgreSQL tunning on the unencrypted instance
      ansible.builtin.lineinfile:
        path: "{{ pg_data }}/postgresql.auto.conf"
        line: "{{ item.name }} = '{{ item.value }}'"
        create: true
        owner: "{{ pg_owner }}"
        group: "{{ pg_group }}"
      loop: "{{ pg_settings }}"
      become_user: "{{ pg_owner }}"

    - name: Start the encrypted instance
      ansible.builtin.command: >
        /usr/edb/as15/bin/pg_ctl -D {{ pg_data_tde }} -l {{ pg_data_tde }}/postgresql.log start
      become_user: "{{ pg_owner }}"

    - name: Stop the encrypted instance
      ansible.builtin.command: >
        /usr/edb/as15/bin/pg_ctl -D {{ pg_data_tde }} stop
      become_user: "{{ pg_owner }}"

    - name: Start the unencrypted instance
      ansible.builtin.command: >
        /usr/edb/as15/bin/pg_ctl -D {{ pg_data }} -l {{ pg_data }}/postgresql.log start
      become_user: "{{ pg_owner }}"

    - name: Stop the unencrypted instance
      ansible.builtin.command: >
        /usr/edb/as15/bin/pg_ctl -D {{ pg_data }} stop
      become_user: "{{ pg_owner }}"

    - name: Allow TPCC connections on the encrypted instance
      ansible.builtin.lineinfile:
        path: "{{ pg_data_tde }}/pg_hba.conf"
        line: "host  all  all  10.0.0.0/24   trust"
      become_user: "{{ pg_owner }}"

    - name: Allow TPCC connections on the unencrypted instance
      ansible.builtin.lineinfile:
        path: "{{ pg_data }}/pg_hba.conf"
        line: "host   all  all  10.0.0.0/24   trust"
      become_user: "{{ pg_owner }}"
